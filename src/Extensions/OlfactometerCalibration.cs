//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace AindBehaviorRigCalibration.OlfactometerCalibration
{
    #pragma warning disable // Disable all warnings

    /// <summary>
    /// Base class for generic types that can be used in AIND schema
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Base class for generic types that can be used in AIND schema")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class AindGeneric
    {
    
        public AindGeneric()
        {
        }
    
        protected AindGeneric(AindGeneric other)
        {
        }
    
        public System.IObservable<AindGeneric> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new AindGeneric(this)));
        }
    
        public System.IObservable<AindGeneric> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new AindGeneric(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Olfactometer channel types
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum ChannelType
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Odor")]
        Odor = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Carrier")]
        Carrier = 1,
    }


    /// <summary>
    /// Concentraion units
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum ConcentrationUnit
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="molar")]
        Molar = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="micromolar")]
        Micromolar = 1,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="nanomolar")]
        Nanomolar = 2,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="% m/m")]
        _MM = 3,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="% v/v")]
        _VV = 4,
    }


    /// <summary>
    /// Olfactometer calibration class
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Olfactometer calibration class")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class OlfactometerCalibration
    {
    
        private System.DateTimeOffset _calibrationDate;
    
        private string _deviceName = "Olfactometer";
    
        private string _description = "Calibration of the harp olfactometer device";
    
        private AindGeneric _input;
    
        private AindGeneric _output;
    
        private string _notes;
    
        public OlfactometerCalibration()
        {
        }
    
        protected OlfactometerCalibration(OlfactometerCalibration other)
        {
            _calibrationDate = other._calibrationDate;
            _deviceName = other._deviceName;
            _description = other._description;
            _input = other._input;
            _output = other._output;
            _notes = other._notes;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration_date", Required=Newtonsoft.Json.Required.Always)]
        public System.DateTimeOffset CalibrationDate
        {
            get
            {
                return _calibrationDate;
            }
            set
            {
                _calibrationDate = value;
            }
        }
    
        /// <summary>
        /// Must match a device name in rig/instrument
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("device_name")]
        [System.ComponentModel.DescriptionAttribute("Must match a device name in rig/instrument")]
        public string DeviceName
        {
            get
            {
                return _deviceName;
            }
            set
            {
                _deviceName = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("description")]
        public string Description
        {
            get
            {
                return _description;
            }
            set
            {
                _description = value;
            }
        }
    
        /// <summary>
        /// Calibration input
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("input")]
        [System.ComponentModel.DescriptionAttribute("Calibration input")]
        public AindGeneric Input
        {
            get
            {
                return _input;
            }
            set
            {
                _input = value;
            }
        }
    
        /// <summary>
        /// Calibration output
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("output")]
        [System.ComponentModel.DescriptionAttribute("Calibration output")]
        public AindGeneric Output
        {
            get
            {
                return _output;
            }
            set
            {
                _output = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("notes")]
        public string Notes
        {
            get
            {
                return _notes;
            }
            set
            {
                _notes = value;
            }
        }
    
        public System.IObservable<OlfactometerCalibration> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new OlfactometerCalibration(this)));
        }
    
        public System.IObservable<OlfactometerCalibration> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new OlfactometerCalibration(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("calibration_date = " + _calibrationDate + ", ");
            stringBuilder.Append("device_name = " + _deviceName + ", ");
            stringBuilder.Append("description = " + _description + ", ");
            stringBuilder.Append("input = " + _input + ", ");
            stringBuilder.Append("output = " + _output + ", ");
            stringBuilder.Append("notes = " + _notes);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// description of a Olfactometer channel
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("description of a Olfactometer channel")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class OlfactometerChannel
    {
    
        private int _channelIndex;
    
        private ChannelType _channelType = AindBehaviorRigCalibration.OlfactometerCalibration.ChannelType.Odor;
    
        private OlfactometerChannelFlowCapacity _flowCapacity = AindBehaviorRigCalibration.OlfactometerCalibration.OlfactometerChannelFlowCapacity._100;
    
        private string _flowUnit = "mL/min";
    
        public OlfactometerChannel()
        {
        }
    
        protected OlfactometerChannel(OlfactometerChannel other)
        {
            _channelIndex = other._channelIndex;
            _channelType = other._channelType;
            _flowCapacity = other._flowCapacity;
            _flowUnit = other._flowUnit;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("channel_index", Required=Newtonsoft.Json.Required.Always)]
        public int ChannelIndex
        {
            get
            {
                return _channelIndex;
            }
            set
            {
                _channelIndex = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("channel_type")]
        public ChannelType ChannelType
        {
            get
            {
                return _channelType;
            }
            set
            {
                _channelType = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("flow_capacity")]
        public OlfactometerChannelFlowCapacity FlowCapacity
        {
            get
            {
                return _flowCapacity;
            }
            set
            {
                _flowCapacity = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("flow_unit")]
        public string FlowUnit
        {
            get
            {
                return _flowUnit;
            }
            set
            {
                _flowUnit = value;
            }
        }
    
        public System.IObservable<OlfactometerChannel> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new OlfactometerChannel(this)));
        }
    
        public System.IObservable<OlfactometerChannel> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new OlfactometerChannel(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("channel_index = " + _channelIndex + ", ");
            stringBuilder.Append("channel_type = " + _channelType + ", ");
            stringBuilder.Append("flow_capacity = " + _flowCapacity + ", ");
            stringBuilder.Append("flow_unit = " + _flowUnit);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Description of olfactometer channel configurations
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Description of olfactometer channel configurations")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class OlfactometerChannelConfig
    {
    
        private int _channelIndex;
    
        private string _odorant;
    
        private string _odorantDilution;
    
        private ConcentrationUnit _odorantDilutionUnit = AindBehaviorRigCalibration.OlfactometerCalibration.ConcentrationUnit._VV;
    
        public OlfactometerChannelConfig()
        {
        }
    
        protected OlfactometerChannelConfig(OlfactometerChannelConfig other)
        {
            _channelIndex = other._channelIndex;
            _odorant = other._odorant;
            _odorantDilution = other._odorantDilution;
            _odorantDilutionUnit = other._odorantDilutionUnit;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("channel_index", Required=Newtonsoft.Json.Required.Always)]
        public int ChannelIndex
        {
            get
            {
                return _channelIndex;
            }
            set
            {
                _channelIndex = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("odorant", Required=Newtonsoft.Json.Required.Always)]
        public string Odorant
        {
            get
            {
                return _odorant;
            }
            set
            {
                _odorant = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("odorant_dilution", Required=Newtonsoft.Json.Required.Always)]
        public string OdorantDilution
        {
            get
            {
                return _odorantDilution;
            }
            set
            {
                _odorantDilution = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("odorant_dilution_unit")]
        public ConcentrationUnit OdorantDilutionUnit
        {
            get
            {
                return _odorantDilutionUnit;
            }
            set
            {
                _odorantDilutionUnit = value;
            }
        }
    
        public System.IObservable<OlfactometerChannelConfig> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new OlfactometerChannelConfig(this)));
        }
    
        public System.IObservable<OlfactometerChannelConfig> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new OlfactometerChannelConfig(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("channel_index = " + _channelIndex + ", ");
            stringBuilder.Append("odorant = " + _odorant + ", ");
            stringBuilder.Append("odorant_dilution = " + _odorantDilution + ", ");
            stringBuilder.Append("odorant_dilution_unit = " + _odorantDilutionUnit);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Olfactometer operation control model that is used to run a calibration data acquisition workflow
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Olfactometer operation control model that is used to run a calibration data acqui" +
        "sition workflow")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class OlfactometerOperationControl
    {
    
        private System.Collections.Generic.IDictionary<string, OlfactometerChannel> _channelConfig;
    
        private System.Collections.Generic.IDictionary<string, OlfactometerChannelConfig> _stimulusConfig;
    
        private double _fullFlowRate = 1000D;
    
        private int _nRepeatsPerStimulus = 1;
    
        private double _timeOn = 1D;
    
        private double _timeOff = 1D;
    
        public OlfactometerOperationControl()
        {
        }
    
        protected OlfactometerOperationControl(OlfactometerOperationControl other)
        {
            _channelConfig = other._channelConfig;
            _stimulusConfig = other._stimulusConfig;
            _fullFlowRate = other._fullFlowRate;
            _nRepeatsPerStimulus = other._nRepeatsPerStimulus;
            _timeOn = other._timeOn;
            _timeOff = other._timeOff;
        }
    
        /// <summary>
        /// Configuration of olfactometer channels
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("channel_config")]
        [System.ComponentModel.DescriptionAttribute("Configuration of olfactometer channels")]
        public System.Collections.Generic.IDictionary<string, OlfactometerChannel> ChannelConfig
        {
            get
            {
                return _channelConfig;
            }
            set
            {
                _channelConfig = value;
            }
        }
    
        /// <summary>
        /// Configuration of the odor stimuli
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("stimulus_config")]
        [System.ComponentModel.DescriptionAttribute("Configuration of the odor stimuli")]
        public System.Collections.Generic.IDictionary<string, OlfactometerChannelConfig> StimulusConfig
        {
            get
            {
                return _stimulusConfig;
            }
            set
            {
                _stimulusConfig = value;
            }
        }
    
        /// <summary>
        /// Full flow rate of the olfactometer
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("full_flow_rate")]
        [System.ComponentModel.DescriptionAttribute("Full flow rate of the olfactometer")]
        public double FullFlowRate
        {
            get
            {
                return _fullFlowRate;
            }
            set
            {
                _fullFlowRate = value;
            }
        }
    
        /// <summary>
        /// Number of repeats per stimulus
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("n_repeats_per_stimulus")]
        [System.ComponentModel.DescriptionAttribute("Number of repeats per stimulus")]
        public int NRepeatsPerStimulus
        {
            get
            {
                return _nRepeatsPerStimulus;
            }
            set
            {
                _nRepeatsPerStimulus = value;
            }
        }
    
        /// <summary>
        /// Time (s) the valve is open during calibration
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("time_on")]
        [System.ComponentModel.DescriptionAttribute("Time (s) the valve is open during calibration")]
        public double TimeOn
        {
            get
            {
                return _timeOn;
            }
            set
            {
                _timeOn = value;
            }
        }
    
        /// <summary>
        /// Time (s) the valve is close during calibration
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("time_off")]
        [System.ComponentModel.DescriptionAttribute("Time (s) the valve is close during calibration")]
        public double TimeOff
        {
            get
            {
                return _timeOff;
            }
            set
            {
                _timeOff = value;
            }
        }
    
        public System.IObservable<OlfactometerOperationControl> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new OlfactometerOperationControl(this)));
        }
    
        public System.IObservable<OlfactometerOperationControl> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new OlfactometerOperationControl(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("channel_config = " + _channelConfig + ", ");
            stringBuilder.Append("stimulus_config = " + _stimulusConfig + ", ");
            stringBuilder.Append("full_flow_rate = " + _fullFlowRate + ", ");
            stringBuilder.Append("n_repeats_per_stimulus = " + _nRepeatsPerStimulus + ", ");
            stringBuilder.Append("time_on = " + _timeOn + ", ");
            stringBuilder.Append("time_off = " + _timeOff);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class OlfactometerCalibrationModel
    {
    
        private string _describedBy = "https://raw.githubusercontent.com/AllenNeuralDynamics/Aind.Behavior.Services/main/src/DataSchemas/schemas/olfactometer_calibration.json";
    
        private string _schemaVersion = "0.2.0";
    
        private OlfactometerOperationControl _operationControl = new OlfactometerOperationControl();
    
        private OlfactometerCalibration _calibration;
    
        private string _rootPath;
    
        private System.DateTimeOffset _date;
    
        private string _notes = "";
    
        private string _experiment = "Calibration";
    
        private string _experimenter = "Experimenter";
    
        private bool _allowDirty = false;
    
        private string _remoteDataPath;
    
        private int _rngSeed = 0;
    
        private string _commitHash;
    
        public OlfactometerCalibrationModel()
        {
        }
    
        protected OlfactometerCalibrationModel(OlfactometerCalibrationModel other)
        {
            _describedBy = other._describedBy;
            _schemaVersion = other._schemaVersion;
            _operationControl = other._operationControl;
            _calibration = other._calibration;
            _rootPath = other._rootPath;
            _date = other._date;
            _notes = other._notes;
            _experiment = other._experiment;
            _experimenter = other._experimenter;
            _allowDirty = other._allowDirty;
            _remoteDataPath = other._remoteDataPath;
            _rngSeed = other._rngSeed;
            _commitHash = other._commitHash;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("describedBy")]
        public string DescribedBy
        {
            get
            {
                return _describedBy;
            }
            set
            {
                _describedBy = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("schema_version")]
        public string SchemaVersion
        {
            get
            {
                return _schemaVersion;
            }
            set
            {
                _schemaVersion = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("operation_control", Required=Newtonsoft.Json.Required.Always)]
        public OlfactometerOperationControl OperationControl
        {
            get
            {
                return _operationControl;
            }
            set
            {
                _operationControl = value;
            }
        }
    
        /// <summary>
        /// Calibration data
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration")]
        [System.ComponentModel.DescriptionAttribute("Calibration data")]
        public OlfactometerCalibration Calibration
        {
            get
            {
                return _calibration;
            }
            set
            {
                _calibration = value;
            }
        }
    
        /// <summary>
        /// Root path of the experiment
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("rootPath", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Root path of the experiment")]
        public string RootPath
        {
            get
            {
                return _rootPath;
            }
            set
            {
                _rootPath = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("date")]
        public System.DateTimeOffset Date
        {
            get
            {
                return _date;
            }
            set
            {
                _date = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("notes")]
        public string Notes
        {
            get
            {
                return _notes;
            }
            set
            {
                _notes = value;
            }
        }
    
        /// <summary>
        /// Name of the experiment
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("experiment")]
        [System.ComponentModel.DescriptionAttribute("Name of the experiment")]
        public string Experiment
        {
            get
            {
                return _experiment;
            }
            set
            {
                _experiment = value;
            }
        }
    
        /// <summary>
        /// Name of the subject
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("experimenter")]
        [System.ComponentModel.DescriptionAttribute("Name of the subject")]
        public string Experimenter
        {
            get
            {
                return _experimenter;
            }
            set
            {
                _experimenter = value;
            }
        }
    
        /// <summary>
        /// Allow code to run from dirty repository
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("allowDirty")]
        [System.ComponentModel.DescriptionAttribute("Allow code to run from dirty repository")]
        public bool AllowDirty
        {
            get
            {
                return _allowDirty;
            }
            set
            {
                _allowDirty = value;
            }
        }
    
        /// <summary>
        /// Path to remote data. If null, no attempt to copy data will be made
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("remoteDataPath")]
        [System.ComponentModel.DescriptionAttribute("Path to remote data. If null, no attempt to copy data will be made")]
        public string RemoteDataPath
        {
            get
            {
                return _remoteDataPath;
            }
            set
            {
                _remoteDataPath = value;
            }
        }
    
        /// <summary>
        /// Seed of the random number generator. If 0 it will be randomized.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("rngSeed")]
        [System.ComponentModel.DescriptionAttribute("Seed of the random number generator. If 0 it will be randomized.")]
        public int RngSeed
        {
            get
            {
                return _rngSeed;
            }
            set
            {
                _rngSeed = value;
            }
        }
    
        /// <summary>
        /// Commit hash of the repository
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("commitHash")]
        [System.ComponentModel.DescriptionAttribute("Commit hash of the repository")]
        public string CommitHash
        {
            get
            {
                return _commitHash;
            }
            set
            {
                _commitHash = value;
            }
        }
    
        public System.IObservable<OlfactometerCalibrationModel> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new OlfactometerCalibrationModel(this)));
        }
    
        public System.IObservable<OlfactometerCalibrationModel> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new OlfactometerCalibrationModel(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("describedBy = " + _describedBy + ", ");
            stringBuilder.Append("schema_version = " + _schemaVersion + ", ");
            stringBuilder.Append("operation_control = " + _operationControl + ", ");
            stringBuilder.Append("calibration = " + _calibration + ", ");
            stringBuilder.Append("rootPath = " + _rootPath + ", ");
            stringBuilder.Append("date = " + _date + ", ");
            stringBuilder.Append("notes = " + _notes + ", ");
            stringBuilder.Append("experiment = " + _experiment + ", ");
            stringBuilder.Append("experimenter = " + _experimenter + ", ");
            stringBuilder.Append("allowDirty = " + _allowDirty + ", ");
            stringBuilder.Append("remoteDataPath = " + _remoteDataPath + ", ");
            stringBuilder.Append("rngSeed = " + _rngSeed + ", ");
            stringBuilder.Append("commitHash = " + _commitHash);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum OlfactometerChannelFlowCapacity
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="100")]
        _100 = 100,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="1000")]
        _1000 = 1000,
    }


    /// <summary>
    /// Serializes a sequence of data model objects into JSON strings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Serializes a sequence of data model objects into JSON strings.")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    public partial class SerializeToJson
    {
    
        private System.IObservable<string> Process<T>(System.IObservable<T> source)
        {
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.SerializeObject(value));
        }

        public System.IObservable<string> Process(System.IObservable<AindGeneric> source)
        {
            return Process<AindGeneric>(source);
        }

        public System.IObservable<string> Process(System.IObservable<OlfactometerCalibration> source)
        {
            return Process<OlfactometerCalibration>(source);
        }

        public System.IObservable<string> Process(System.IObservable<OlfactometerChannel> source)
        {
            return Process<OlfactometerChannel>(source);
        }

        public System.IObservable<string> Process(System.IObservable<OlfactometerChannelConfig> source)
        {
            return Process<OlfactometerChannelConfig>(source);
        }

        public System.IObservable<string> Process(System.IObservable<OlfactometerOperationControl> source)
        {
            return Process<OlfactometerOperationControl>(source);
        }

        public System.IObservable<string> Process(System.IObservable<OlfactometerCalibrationModel> source)
        {
            return Process<OlfactometerCalibrationModel>(source);
        }
    }


    /// <summary>
    /// Deserializes a sequence of JSON strings into data model objects.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Deserializes a sequence of JSON strings into data model objects.")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<AindGeneric>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OlfactometerCalibration>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OlfactometerChannel>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OlfactometerChannelConfig>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OlfactometerOperationControl>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OlfactometerCalibrationModel>))]
    public partial class DeserializeFromJson : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public DeserializeFromJson()
        {
            Type = new Bonsai.Expressions.TypeMapping<OlfactometerCalibrationModel>();
        }

        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = (Bonsai.Expressions.TypeMapping)Type;
            var returnType = typeMapping.GetType().GetGenericArguments()[0];
            return System.Linq.Expressions.Expression.Call(
                typeof(DeserializeFromJson),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

        private static System.IObservable<T> Process<T>(System.IObservable<string> source)
        {
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.DeserializeObject<T>(value));
        }
    }
}