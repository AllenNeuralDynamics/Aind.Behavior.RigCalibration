//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v10.9.0.0 (Newtonsoft.Json v9.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace AindBehaviorRigCalibration.OlfactometerCalibration
{
    #pragma warning disable // Disable all warnings

    /// <summary>
    /// Olfactometer channel types
    /// </summary>
    public enum ChannelType
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Odor")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Odor")]
        Odor = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Carrier")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Carrier")]
        Carrier = 1,
    }


    /// <summary>
    /// Concentraion units
    /// </summary>
    public enum ConcentrationUnit
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="molar")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="molar")]
        Molar = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="micromolar")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="micromolar")]
        Micromolar = 1,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="nanomolar")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="nanomolar")]
        Nanomolar = 2,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="% m/m")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="% m/m")]
        @__m_m = 3,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="% v/v")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="% v/v")]
        @__v_v = 4,
    }


    /// <summary>
    /// description of a Olfactometer channel
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("description of a Olfactometer channel")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class OlfactometerChannel
    {
    
        private int _channel_index;
    
        private ChannelType _channel_type = AindBehaviorRigCalibration.OlfactometerCalibration.ChannelType.Odor;
    
        private OlfactometerChannelFlow_capacity _flow_capacity = AindBehaviorRigCalibration.OlfactometerCalibration.OlfactometerChannelFlow_capacity._100;
    
        private string _flow_unit = "mL/min";
    
        [Newtonsoft.Json.JsonPropertyAttribute("channel_index", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="channel_index")]
        public int Channel_index
        {
            get
            {
                return _channel_index;
            }
            set
            {
                _channel_index = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("channel_type")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="channel_type")]
        public ChannelType Channel_type
        {
            get
            {
                return _channel_type;
            }
            set
            {
                _channel_type = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("flow_capacity")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="flow_capacity")]
        public OlfactometerChannelFlow_capacity Flow_capacity
        {
            get
            {
                return _flow_capacity;
            }
            set
            {
                _flow_capacity = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("flow_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="flow_unit")]
        public string Flow_unit
        {
            get
            {
                return _flow_unit;
            }
            set
            {
                _flow_unit = value;
            }
        }
    
        public System.IObservable<OlfactometerChannel> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new OlfactometerChannel
                {
                    Channel_index = _channel_index,
                    Channel_type = _channel_type,
                    Flow_capacity = _flow_capacity,
                    Flow_unit = _flow_unit
                }));
        }
    }


    /// <summary>
    /// Description of olfactometer channel configurations
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Description of olfactometer channel configurations")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class OlfactometerChannelConfig
    {
    
        private int _channel_index;
    
        private string _odorant;
    
        private Odorant_dilution _odorant_dilution;
    
        private ConcentrationUnit _odorant_dilution_unit = AindBehaviorRigCalibration.OlfactometerCalibration.ConcentrationUnit.__v_v;
    
        [Newtonsoft.Json.JsonPropertyAttribute("channel_index", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="channel_index")]
        public int Channel_index
        {
            get
            {
                return _channel_index;
            }
            set
            {
                _channel_index = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("odorant", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="odorant")]
        public string Odorant
        {
            get
            {
                return _odorant;
            }
            set
            {
                _odorant = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("odorant_dilution", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="odorant_dilution")]
        public Odorant_dilution Odorant_dilution
        {
            get
            {
                return _odorant_dilution;
            }
            set
            {
                _odorant_dilution = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("odorant_dilution_unit")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="odorant_dilution_unit")]
        public ConcentrationUnit Odorant_dilution_unit
        {
            get
            {
                return _odorant_dilution_unit;
            }
            set
            {
                _odorant_dilution_unit = value;
            }
        }
    
        public System.IObservable<OlfactometerChannelConfig> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new OlfactometerChannelConfig
                {
                    Channel_index = _channel_index,
                    Odorant = _odorant,
                    Odorant_dilution = _odorant_dilution,
                    Odorant_dilution_unit = _odorant_dilution_unit
                }));
        }
    }


    /// <summary>
    /// Olfactometer operation control model that is used to run a calibration data acquisition workflow
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Olfactometer operation control model that is used to run a calibration data acqui" +
        "sition workflow")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class OlfactometerOperationControl
    {
    
        private System.Collections.Generic.IDictionary<string, OlfactometerChannel> _channel_config;
    
        private System.Collections.Generic.IDictionary<string, OlfactometerChannelConfig> _stimulus_config;
    
        private double _full_flow_rate = 1000D;
    
        private double _target_stimulus_flow_rate = 100D;
    
        private int _n_repeats_per_stimulus = 1;
    
        private double _time_on = 1D;
    
        private double _time_off = 1D;
    
        /// <summary>
        /// Configuration of olfactometer channels
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("channel_config")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="channel_config")]
        [System.ComponentModel.DescriptionAttribute("Configuration of olfactometer channels")]
        public System.Collections.Generic.IDictionary<string, OlfactometerChannel> Channel_config
        {
            get
            {
                return _channel_config;
            }
            set
            {
                _channel_config = value;
            }
        }
    
        /// <summary>
        /// Configuration of the odor stimuli
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("stimulus_config")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="stimulus_config")]
        [System.ComponentModel.DescriptionAttribute("Configuration of the odor stimuli")]
        public System.Collections.Generic.IDictionary<string, OlfactometerChannelConfig> Stimulus_config
        {
            get
            {
                return _stimulus_config;
            }
            set
            {
                _stimulus_config = value;
            }
        }
    
        /// <summary>
        /// Full flow rate of the olfactometer
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("full_flow_rate")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="full_flow_rate")]
        [System.ComponentModel.DescriptionAttribute("Full flow rate of the olfactometer")]
        public double Full_flow_rate
        {
            get
            {
                return _full_flow_rate;
            }
            set
            {
                _full_flow_rate = value;
            }
        }
    
        /// <summary>
        /// Target flow rate of the odor stimuli
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("target_stimulus_flow_rate")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="target_stimulus_flow_rate")]
        [System.ComponentModel.DescriptionAttribute("Target flow rate of the odor stimuli")]
        public double Target_stimulus_flow_rate
        {
            get
            {
                return _target_stimulus_flow_rate;
            }
            set
            {
                _target_stimulus_flow_rate = value;
            }
        }
    
        /// <summary>
        /// Number of repeats per stimulus
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("n_repeats_per_stimulus")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="n_repeats_per_stimulus")]
        [System.ComponentModel.DescriptionAttribute("Number of repeats per stimulus")]
        public int N_repeats_per_stimulus
        {
            get
            {
                return _n_repeats_per_stimulus;
            }
            set
            {
                _n_repeats_per_stimulus = value;
            }
        }
    
        /// <summary>
        /// Time (s) the valve is open during calibration
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("time_on")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="time_on")]
        [System.ComponentModel.DescriptionAttribute("Time (s) the valve is open during calibration")]
        public double Time_on
        {
            get
            {
                return _time_on;
            }
            set
            {
                _time_on = value;
            }
        }
    
        /// <summary>
        /// Time (s) the valve is close during calibration
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("time_off")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="time_off")]
        [System.ComponentModel.DescriptionAttribute("Time (s) the valve is close during calibration")]
        public double Time_off
        {
            get
            {
                return _time_off;
            }
            set
            {
                _time_off = value;
            }
        }
    
        public System.IObservable<OlfactometerOperationControl> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new OlfactometerOperationControl
                {
                    Channel_config = _channel_config,
                    Stimulus_config = _stimulus_config,
                    Full_flow_rate = _full_flow_rate,
                    Target_stimulus_flow_rate = _target_stimulus_flow_rate,
                    N_repeats_per_stimulus = _n_repeats_per_stimulus,
                    Time_on = _time_on,
                    Time_off = _time_off
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class OlfactometerCalibrationModel
    {
    
        private string _describedBy;
    
        private object _schema_version;
    
        private OlfactometerOperationControl _operation_control = new OlfactometerOperationControl();
    
        private object _calibration;
    
        private System.DateTimeOffset _date;
    
        private string _notes = "";
    
        [Newtonsoft.Json.JsonPropertyAttribute("describedBy", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="describedBy")]
        public string DescribedBy
        {
            get
            {
                return _describedBy;
            }
            set
            {
                _describedBy = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("schema_version")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="schema_version")]
        public object Schema_version
        {
            get
            {
                return _schema_version;
            }
            set
            {
                _schema_version = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("operation_control", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="operation_control")]
        public OlfactometerOperationControl Operation_control
        {
            get
            {
                return _operation_control;
            }
            set
            {
                _operation_control = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="calibration")]
        public object Calibration
        {
            get
            {
                return _calibration;
            }
            set
            {
                _calibration = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("date", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="date")]
        public System.DateTimeOffset Date
        {
            get
            {
                return _date;
            }
            set
            {
                _date = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("notes")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="notes")]
        public string Notes
        {
            get
            {
                return _notes;
            }
            set
            {
                _notes = value;
            }
        }
    
        public System.IObservable<OlfactometerCalibrationModel> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new OlfactometerCalibrationModel
                {
                    DescribedBy = _describedBy,
                    Schema_version = _schema_version,
                    Operation_control = _operation_control,
                    Calibration = _calibration,
                    Date = _date,
                    Notes = _notes
                }));
        }
    }


    public enum OlfactometerChannelFlow_capacity
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="100")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="100")]
        _100 = 100,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="1000")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="1000")]
        _1000 = 1000,
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Odorant_dilution
    {
    
        public System.IObservable<Odorant_dilution> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new Odorant_dilution
                {

                }));
        }
    }


    /// <summary>
    /// Serializes a sequence of data model objects into JSON strings.
    /// </summary>
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.ComponentModel.DescriptionAttribute("Serializes a sequence of data model objects into JSON strings.")]
    public partial class SerializeToJson
    {
    
        private System.IObservable<string> Process<T>(System.IObservable<T> source)
        {
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.SerializeObject(value));
        }

        public System.IObservable<string> Process(System.IObservable<OlfactometerChannel> source)
        {
            return Process<OlfactometerChannel>(source);
        }

        public System.IObservable<string> Process(System.IObservable<OlfactometerChannelConfig> source)
        {
            return Process<OlfactometerChannelConfig>(source);
        }

        public System.IObservable<string> Process(System.IObservable<OlfactometerOperationControl> source)
        {
            return Process<OlfactometerOperationControl>(source);
        }

        public System.IObservable<string> Process(System.IObservable<OlfactometerCalibrationModel> source)
        {
            return Process<OlfactometerCalibrationModel>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Odorant_dilution> source)
        {
            return Process<Odorant_dilution>(source);
        }
    }


    /// <summary>
    /// Deserializes a sequence of JSON strings into data model objects.
    /// </summary>
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OlfactometerChannel>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OlfactometerChannelConfig>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OlfactometerOperationControl>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OlfactometerCalibrationModel>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Odorant_dilution>))]
    [System.ComponentModel.DescriptionAttribute("Deserializes a sequence of JSON strings into data model objects.")]
    public partial class DeserializeFromJson : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public DeserializeFromJson()
        {
            Type = new Bonsai.Expressions.TypeMapping<OlfactometerCalibrationModel>();
        }

        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = (Bonsai.Expressions.TypeMapping)Type;
            var returnType = typeMapping.GetType().GetGenericArguments()[0];
            return System.Linq.Expressions.Expression.Call(
                typeof(DeserializeFromJson),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

        private static System.IObservable<T> Process<T>(System.IObservable<string> source)
        {
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.DeserializeObject<T>(value));
        }
    }


    /// <summary>
    /// Serializes a sequence of data model objects into YAML strings.
    /// </summary>
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.ComponentModel.DescriptionAttribute("Serializes a sequence of data model objects into YAML strings.")]
    public partial class SerializeToYaml
    {
    
        private System.IObservable<string> Process<T>(System.IObservable<T> source)
        {
            return System.Reactive.Linq.Observable.Defer(() =>
            {
                var serializer = new YamlDotNet.Serialization.SerializerBuilder().Build();
                return System.Reactive.Linq.Observable.Select(source, value => serializer.Serialize(value)); 
            });
        }

        public System.IObservable<string> Process(System.IObservable<OlfactometerChannel> source)
        {
            return Process<OlfactometerChannel>(source);
        }

        public System.IObservable<string> Process(System.IObservable<OlfactometerChannelConfig> source)
        {
            return Process<OlfactometerChannelConfig>(source);
        }

        public System.IObservable<string> Process(System.IObservable<OlfactometerOperationControl> source)
        {
            return Process<OlfactometerOperationControl>(source);
        }

        public System.IObservable<string> Process(System.IObservable<OlfactometerCalibrationModel> source)
        {
            return Process<OlfactometerCalibrationModel>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Odorant_dilution> source)
        {
            return Process<Odorant_dilution>(source);
        }
    }


    /// <summary>
    /// Deserializes a sequence of YAML strings into data model objects.
    /// </summary>
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OlfactometerChannel>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OlfactometerChannelConfig>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OlfactometerOperationControl>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OlfactometerCalibrationModel>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Odorant_dilution>))]
    [System.ComponentModel.DescriptionAttribute("Deserializes a sequence of YAML strings into data model objects.")]
    public partial class DeserializeFromYaml : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public DeserializeFromYaml()
        {
            Type = new Bonsai.Expressions.TypeMapping<OlfactometerCalibrationModel>();
        }

        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = (Bonsai.Expressions.TypeMapping)Type;
            var returnType = typeMapping.GetType().GetGenericArguments()[0];
            return System.Linq.Expressions.Expression.Call(
                typeof(DeserializeFromYaml),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

        private static System.IObservable<T> Process<T>(System.IObservable<string> source)
        {
            return System.Reactive.Linq.Observable.Defer(() =>
            {
                var serializer = new YamlDotNet.Serialization.DeserializerBuilder().Build();
                return System.Reactive.Linq.Observable.Select(source, value =>
                {
                    var reader = new System.IO.StringReader(value);
                    var parser = new YamlDotNet.Core.MergingParser(new YamlDotNet.Core.Parser(reader));
                    return serializer.Deserialize<T>(parser);
                });
            });
        }
    }
}