//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v10.9.0.0 (Newtonsoft.Json v9.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace AindBehaviorRigCalibration.WaterValveCalibration
{
    #pragma warning disable // Disable all warnings

    /// <summary>
    /// Olfactometer operation control model that is used to run a calibration data acquisition workflow
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Olfactometer operation control model that is used to run a calibration data acqui" +
        "sition workflow")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class OlfactometerOperationControl
    {
    
        private System.Collections.Generic.List<double> _valve_open_time = new System.Collections.Generic.List<double>();
    
        private double _valve_open_interval = 0.2D;
    
        private int _repeat_count = 200;
    
        /// <summary>
        /// An array with the times (s) the valve is open during calibration
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("valve_open_time", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="valve_open_time")]
        [System.ComponentModel.DescriptionAttribute("An array with the times (s) the valve is open during calibration")]
        public System.Collections.Generic.List<double> Valve_open_time
        {
            get
            {
                return _valve_open_time;
            }
            set
            {
                _valve_open_time = value;
            }
        }
    
        /// <summary>
        /// Time between two consecutive valve openings (s)
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("valve_open_interval")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="valve_open_interval")]
        [System.ComponentModel.DescriptionAttribute("Time between two consecutive valve openings (s)")]
        public double Valve_open_interval
        {
            get
            {
                return _valve_open_interval;
            }
            set
            {
                _valve_open_interval = value;
            }
        }
    
        /// <summary>
        /// Number of times the valve opened per measure valve_open_time entry
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("repeat_count")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="repeat_count")]
        [System.ComponentModel.DescriptionAttribute("Number of times the valve opened per measure valve_open_time entry")]
        public int Repeat_count
        {
            get
            {
                return _repeat_count;
            }
            set
            {
                _repeat_count = value;
            }
        }
    
        public System.IObservable<OlfactometerOperationControl> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new OlfactometerOperationControl
                {
                    Valve_open_time = _valve_open_time,
                    Valve_open_interval = _valve_open_interval,
                    Repeat_count = _repeat_count
                }));
        }
    }


    /// <summary>
    /// Water valve calibration class
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Water valve calibration class")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class WaterValveCalibration
    {
    
        private System.DateTimeOffset _calibration_date;
    
        private string _device_name = "WaterValve";
    
        private object _description;
    
        private System.Collections.Generic.List<WaterValveCalibrationInput> _input = new System.Collections.Generic.List<WaterValveCalibrationInput>();
    
        private WaterValveCalibrationOutput _output;
    
        private string _notes;
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration_date", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="calibration_date")]
        public System.DateTimeOffset Calibration_date
        {
            get
            {
                return _calibration_date;
            }
            set
            {
                _calibration_date = value;
            }
        }
    
        /// <summary>
        /// Must match a device name in rig/instrument
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("device_name")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="device_name")]
        [System.ComponentModel.DescriptionAttribute("Must match a device name in rig/instrument")]
        public string Device_name
        {
            get
            {
                return _device_name;
            }
            set
            {
                _device_name = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("description")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="description")]
        public object Description
        {
            get
            {
                return _description;
            }
            set
            {
                _description = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("input")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="input")]
        public System.Collections.Generic.List<WaterValveCalibrationInput> Input
        {
            get
            {
                return _input;
            }
            set
            {
                _input = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("output")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="output")]
        public WaterValveCalibrationOutput Output
        {
            get
            {
                return _output;
            }
            set
            {
                _output = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("notes")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="notes")]
        public string Notes
        {
            get
            {
                return _notes;
            }
            set
            {
                _notes = value;
            }
        }
    
        public System.IObservable<WaterValveCalibration> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new WaterValveCalibration
                {
                    Calibration_date = _calibration_date,
                    Device_name = _device_name,
                    Description = _description,
                    Input = _input,
                    Output = _output,
                    Notes = _notes
                }));
        }
    }


    /// <summary>
    /// Input for water valve calibration class
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Input for water valve calibration class")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class WaterValveCalibrationInput
    {
    
        private double _valve_open_interval;
    
        private double _valve_open_time;
    
        private System.Collections.Generic.List<double> _water_weight = new System.Collections.Generic.List<double>();
    
        private int _repeat_count;
    
        /// <summary>
        /// Time between two consecutive valve openings (s)
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("valve_open_interval", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="valve_open_interval")]
        [System.ComponentModel.DescriptionAttribute("Time between two consecutive valve openings (s)")]
        public double Valve_open_interval
        {
            get
            {
                return _valve_open_interval;
            }
            set
            {
                _valve_open_interval = value;
            }
        }
    
        /// <summary>
        /// Valve open interval (s)
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("valve_open_time", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="valve_open_time")]
        [System.ComponentModel.DescriptionAttribute("Valve open interval (s)")]
        public double Valve_open_time
        {
            get
            {
                return _valve_open_time;
            }
            set
            {
                _valve_open_time = value;
            }
        }
    
        /// <summary>
        /// Weight of water delivered (g)
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("water_weight", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="water_weight")]
        [System.ComponentModel.DescriptionAttribute("Weight of water delivered (g)")]
        public System.Collections.Generic.List<double> Water_weight
        {
            get
            {
                return _water_weight;
            }
            set
            {
                _water_weight = value;
            }
        }
    
        /// <summary>
        /// Number of times the valve opened.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("repeat_count", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="repeat_count")]
        [System.ComponentModel.DescriptionAttribute("Number of times the valve opened.")]
        public int Repeat_count
        {
            get
            {
                return _repeat_count;
            }
            set
            {
                _repeat_count = value;
            }
        }
    
        public System.IObservable<WaterValveCalibrationInput> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new WaterValveCalibrationInput
                {
                    Valve_open_interval = _valve_open_interval,
                    Valve_open_time = _valve_open_time,
                    Water_weight = _water_weight,
                    Repeat_count = _repeat_count
                }));
        }
    }


    /// <summary>
    /// Output for water valve calibration class
    /// </summary>
    [System.ComponentModel.DescriptionAttribute("Output for water valve calibration class")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class WaterValveCalibrationOutput
    {
    
        private System.Collections.Generic.IDictionary<string, double> _interval_average;
    
        private double _slope;
    
        private double _offset;
    
        private double _r2;
    
        private System.Collections.Generic.List<double> _valid_domain;
    
        /// <summary>
        /// Dictionary keyed by measured valve interval and corresponding average single event volume.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("interval_average")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="interval_average")]
        [System.ComponentModel.DescriptionAttribute("Dictionary keyed by measured valve interval and corresponding average single even" +
            "t volume.")]
        public System.Collections.Generic.IDictionary<string, double> Interval_average
        {
            get
            {
                return _interval_average;
            }
            set
            {
                _interval_average = value;
            }
        }
    
        /// <summary>
        /// Slope of the linear regression : Volume(g) = Slope(g/s) * time(s) + offset(g)
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("slope", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="slope")]
        [System.ComponentModel.DescriptionAttribute("Slope of the linear regression : Volume(g) = Slope(g/s) * time(s) + offset(g)")]
        public double Slope
        {
            get
            {
                return _slope;
            }
            set
            {
                _slope = value;
            }
        }
    
        /// <summary>
        /// Offset of the linear regression : Volume(g) = Slope(g/s) * time(s) + offset(g)
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("offset", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="offset")]
        [System.ComponentModel.DescriptionAttribute("Offset of the linear regression : Volume(g) = Slope(g/s) * time(s) + offset(g)")]
        public double Offset
        {
            get
            {
                return _offset;
            }
            set
            {
                _offset = value;
            }
        }
    
        /// <summary>
        /// R2 metric from the linear model.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("r2", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="r2")]
        [System.ComponentModel.DescriptionAttribute("R2 metric from the linear model.")]
        public double R2
        {
            get
            {
                return _r2;
            }
            set
            {
                _r2 = value;
            }
        }
    
        /// <summary>
        /// The optional time-intervals the calibration curve was calculated on.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("valid_domain")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="valid_domain")]
        [System.ComponentModel.DescriptionAttribute("The optional time-intervals the calibration curve was calculated on.")]
        public System.Collections.Generic.List<double> Valid_domain
        {
            get
            {
                return _valid_domain;
            }
            set
            {
                _valid_domain = value;
            }
        }
    
        public System.IObservable<WaterValveCalibrationOutput> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new WaterValveCalibrationOutput
                {
                    Interval_average = _interval_average,
                    Slope = _slope,
                    Offset = _offset,
                    R2 = _r2,
                    Valid_domain = _valid_domain
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class WaterValveCalibrationModel
    {
    
        private string _describedBy;
    
        private object _schema_version;
    
        private OlfactometerOperationControl _operation_control = new OlfactometerOperationControl();
    
        private WaterValveCalibration _calibration = new WaterValveCalibration();
    
        private System.DateTimeOffset _date;
    
        private string _notes = "";
    
        [Newtonsoft.Json.JsonPropertyAttribute("describedBy", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="describedBy")]
        public string DescribedBy
        {
            get
            {
                return _describedBy;
            }
            set
            {
                _describedBy = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("schema_version")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="schema_version")]
        public object Schema_version
        {
            get
            {
                return _schema_version;
            }
            set
            {
                _schema_version = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("operation_control", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="operation_control")]
        public OlfactometerOperationControl Operation_control
        {
            get
            {
                return _operation_control;
            }
            set
            {
                _operation_control = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="calibration")]
        public WaterValveCalibration Calibration
        {
            get
            {
                return _calibration;
            }
            set
            {
                _calibration = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("date", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="date")]
        public System.DateTimeOffset Date
        {
            get
            {
                return _date;
            }
            set
            {
                _date = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("notes")]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="notes")]
        public string Notes
        {
            get
            {
                return _notes;
            }
            set
            {
                _notes = value;
            }
        }
    
        public System.IObservable<WaterValveCalibrationModel> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new WaterValveCalibrationModel
                {
                    DescribedBy = _describedBy,
                    Schema_version = _schema_version,
                    Operation_control = _operation_control,
                    Calibration = _calibration,
                    Date = _date,
                    Notes = _notes
                }));
        }
    }


    /// <summary>
    /// Serializes a sequence of data model objects into JSON strings.
    /// </summary>
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.ComponentModel.DescriptionAttribute("Serializes a sequence of data model objects into JSON strings.")]
    public partial class SerializeToJson
    {
    
        private System.IObservable<string> Process<T>(System.IObservable<T> source)
        {
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.SerializeObject(value));
        }

        public System.IObservable<string> Process(System.IObservable<OlfactometerOperationControl> source)
        {
            return Process<OlfactometerOperationControl>(source);
        }

        public System.IObservable<string> Process(System.IObservable<WaterValveCalibration> source)
        {
            return Process<WaterValveCalibration>(source);
        }

        public System.IObservable<string> Process(System.IObservable<WaterValveCalibrationInput> source)
        {
            return Process<WaterValveCalibrationInput>(source);
        }

        public System.IObservable<string> Process(System.IObservable<WaterValveCalibrationOutput> source)
        {
            return Process<WaterValveCalibrationOutput>(source);
        }

        public System.IObservable<string> Process(System.IObservable<WaterValveCalibrationModel> source)
        {
            return Process<WaterValveCalibrationModel>(source);
        }
    }


    /// <summary>
    /// Deserializes a sequence of JSON strings into data model objects.
    /// </summary>
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OlfactometerOperationControl>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<WaterValveCalibration>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<WaterValveCalibrationInput>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<WaterValveCalibrationOutput>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<WaterValveCalibrationModel>))]
    [System.ComponentModel.DescriptionAttribute("Deserializes a sequence of JSON strings into data model objects.")]
    public partial class DeserializeFromJson : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public DeserializeFromJson()
        {
            Type = new Bonsai.Expressions.TypeMapping<WaterValveCalibrationModel>();
        }

        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = (Bonsai.Expressions.TypeMapping)Type;
            var returnType = typeMapping.GetType().GetGenericArguments()[0];
            return System.Linq.Expressions.Expression.Call(
                typeof(DeserializeFromJson),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

        private static System.IObservable<T> Process<T>(System.IObservable<string> source)
        {
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.DeserializeObject<T>(value));
        }
    }


    /// <summary>
    /// Serializes a sequence of data model objects into YAML strings.
    /// </summary>
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.ComponentModel.DescriptionAttribute("Serializes a sequence of data model objects into YAML strings.")]
    public partial class SerializeToYaml
    {
    
        private System.IObservable<string> Process<T>(System.IObservable<T> source)
        {
            return System.Reactive.Linq.Observable.Defer(() =>
            {
                var serializer = new YamlDotNet.Serialization.SerializerBuilder().Build();
                return System.Reactive.Linq.Observable.Select(source, value => serializer.Serialize(value)); 
            });
        }

        public System.IObservable<string> Process(System.IObservable<OlfactometerOperationControl> source)
        {
            return Process<OlfactometerOperationControl>(source);
        }

        public System.IObservable<string> Process(System.IObservable<WaterValveCalibration> source)
        {
            return Process<WaterValveCalibration>(source);
        }

        public System.IObservable<string> Process(System.IObservable<WaterValveCalibrationInput> source)
        {
            return Process<WaterValveCalibrationInput>(source);
        }

        public System.IObservable<string> Process(System.IObservable<WaterValveCalibrationOutput> source)
        {
            return Process<WaterValveCalibrationOutput>(source);
        }

        public System.IObservable<string> Process(System.IObservable<WaterValveCalibrationModel> source)
        {
            return Process<WaterValveCalibrationModel>(source);
        }
    }


    /// <summary>
    /// Deserializes a sequence of YAML strings into data model objects.
    /// </summary>
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OlfactometerOperationControl>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<WaterValveCalibration>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<WaterValveCalibrationInput>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<WaterValveCalibrationOutput>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<WaterValveCalibrationModel>))]
    [System.ComponentModel.DescriptionAttribute("Deserializes a sequence of YAML strings into data model objects.")]
    public partial class DeserializeFromYaml : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public DeserializeFromYaml()
        {
            Type = new Bonsai.Expressions.TypeMapping<WaterValveCalibrationModel>();
        }

        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = (Bonsai.Expressions.TypeMapping)Type;
            var returnType = typeMapping.GetType().GetGenericArguments()[0];
            return System.Linq.Expressions.Expression.Call(
                typeof(DeserializeFromYaml),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

        private static System.IObservable<T> Process<T>(System.IObservable<string> source)
        {
            return System.Reactive.Linq.Observable.Defer(() =>
            {
                var serializer = new YamlDotNet.Serialization.DeserializerBuilder().Build();
                return System.Reactive.Linq.Observable.Select(source, value =>
                {
                    var reader = new System.IO.StringReader(value);
                    var parser = new YamlDotNet.Core.MergingParser(new YamlDotNet.Core.Parser(reader));
                    return serializer.Deserialize<T>(parser);
                });
            });
        }
    }
}